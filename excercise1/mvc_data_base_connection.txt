🤫️🤫️MySQL notes¶
	🤫️Version support:

		Django supports MySQL 5.6 and higher.
		
		Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity.
	
	Storage engines are MySQL components that handle the SQL operations for different table types. InnoDB is the default and most general-purpose storage engine,and Oracle recommends using it for tables except for specialized use cases.(The CREATE TABLE statement in MySQL 8.0 creates InnoDB tables by default.) 
	
	🤫️Storage engines:
	
		other than we have multiple storages:
		
			Setting the Storage Engine
			The MyISAM Storage Engine
			The MEMORY Storage Engine
			The CSV Storage Engine
			The ARCHIVE Storage Engine
			The BLACKHOLE Storage Engine
			The MERGE Storage Engine
			The FEDERATED Storage Engine
			The EXAMPLE Storage Engine
			Other Storage Engines
			Overview of MySQL Storage Engine Architecture
			
			
	🤫️MySQL DB API Drivers:

		MySQL has a couple drivers that implement the Python Database API described in PEP 249:

    		mysqlclient is a native driver. It’s the recommended choice.
    		MySQL Connector/Python is a pure Python driver from Oracle that does not require the MySQL client library or any Python modules outside thestandard 			library.

		These drivers are thread-safe and provide connection pooling.

		In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient 			while MySQL Connector/Python includes its own.
	mysqlclient¶

		Django requires mysqlclient 1.4.0 or later.
	MySQL Connector/Python¶

	 MySQL Connector/Python is available from the download page. The Django adapter is available in versions 1.1.X and later. It may not support the mostrecent 		releases of Django.






	🤫️🤫️🤫️Connecting to the database:

		Refer to the settings documentation.

		Connection settings are used in this order:

		    OPTIONS.
		    NAME, USER, PASSWORD, HOST, PORT
		    MySQL option files.

		In other words, if you set the name of the database in OPTIONS, this will take precedence over NAME, which would override anything in a MySQLoption 			file.

		Here’s a sample configuration which uses a MySQL option file:

			# settings.py
			DATABASES = {
			    'default': {
				'ENGINE': 'django.db.backends.mysql',
				'OPTIONS': {
				    'read_default_file': '/path/to/my.cnf',
				},
			    }
			}


			# my.cnf
			[client]
			database = NAME
			user = USER
			password = PASSWORD
			default-character-set = utf8

		Several other MySQLdb connection options may be useful, such as ssl, init_command, and sql_mode.

	🤫️MySQL DB API Drivers:

		MySQL has a couple drivers that implement the Python Database API described in PEP 249:

    		mysqlclient is a native driver. It’s the recommended choice.
    		MySQL Connector/Python is a pure Python driver from Oracle that does not require the MySQL client library or any Python modules outside the standard 			library.

		These drivers are thread-safe and provide connection pooling.

		In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient 			while MySQL Connector/Python includes its own.
	🤫️mysqlclient:

		Django requires mysqlclient 1.4.0 or later.
	🤫️MySQL Connector/Python:

	 MySQL Connector/Python is available from the download page. The Django adapter is available in versions 1.1.X and later. It may not support the mostrecent 		 releases of Django.





	For other reference """https://docs.djangoproject.com/en/3.1/ref/databases/#mysql-notes"""




										OR
										


Django Database Connectivity

	The settings.py file contains all the project settings along with database connection details. By default, Django works with SQLite, database and allows configuring for other databases as well.

Database connectivity requires all the connection details such as database name, user credentials, hostname drive name etc.

To connect with MySQL, django.db.backends.mysql driver is used to establishing a connection between application and database. Let's see an example.




We need to provide all connection details in the settings file. The settings.py file of our project contains the following code for the database.

    DATABASES = {  
        'default': {  
            'ENGINE': 'django.db.backends.mysql',  
            'NAME': 'djangoApp',  
            'USER':'root',  
            'PASSWORD':'mysql',  
            'HOST':'localhost',  
            'PORT':'3306'  
        }  
    }  
    
    
fter providing details, check the connection using the migrate command.

    $ python3 manage.py migrate  

This command will create tables for admin, auth, contenttypes, and sessions.

Django first creates a migration file that contains the details of table structure. To create migration use the following command.

    $ python3 manage.py makemigrations  
    
    
    





























































